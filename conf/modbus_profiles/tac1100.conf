#
# Legend:
#
# reg: number (40000), type (u16), units (10mAh)
#	desc: id, display_units, sample_frequency, user_description
#	valueid: val0, val1, ...
#	valuedesc: "Value 0", "Value 1", ...
#	map-local: device.component.element
#	map-mb: server_name, register_number_or_id
#

#
# TAiYEDQ TAC2100:
#  https://www.kdocs.cn/l/cnQKPZECE6eY
#

registers:
	# float regs
	reg: 30000, f32, V,			desc: voltage, V, realtime, "Voltage"
	reg: 30006, f32, A,			desc: current, A, realtime, "Current"
	reg: 30012, f32, W,			desc: activePower, W, realtime, "Active power"
	reg: 30018, f32, var,		desc: reactivePower, VAR, realtime, "Reactive power"
	reg: 30024, f32, VA,		desc: apparentPower, VA, realtime, "Apparent power"
	reg: 30030, f32,			desc: powerFactor, , realtime, "Power factor"
	reg: 30036, f32, deg,		desc: phase, deg, realtime, "Phase angle"
	reg: 30048, f32, Hz,		desc: frequency, Hz, realtime, "Frequency of supply voltage"
	reg: 30078, enumf32,		desc: nature, , medium, "Nature of load"
		valueid: resistive, inductive, capacitive, nonload
		valuedesc: "Resistive", "Inductive", "Capacitive", "Non Load"
	reg: 30140, f32, W,			desc: activePowerDemand, W, medium, "Active power demand"
	reg: 30142, f32, var,		desc: reactivePowerDemand, var, medium, "Reactive power demand"
	reg: 30144, f32, VA,		desc: apparentPowerDemand, VA, medium, "Apparent power demand"
	reg: 30146, f32, A,			desc: currentDemand, A, medium, "Current demand"
	reg: 30154, f32, W,			desc: importActivePowerDemand, W, medium, "Import active power demand"
	reg: 30156, f32, W,			desc: exportActivePowerDemand, W, medium, "Export active power demand"
	reg: 30162, f32, W,			desc: maximumActivePowerDemand, W, medium, "Maximum active power demand"
	reg: 30164, f32, var,		desc: maximumReactivePowerDemand, var, medium, "Maximum reactive power demand"
	reg: 30166, f32, VA,		desc: maximumApparentPowerDemand, VA, medium, "Maximum apparent power demand"
	reg: 30168, f32, A,			desc: maximumCurrentDemand, A, medium, "Maximum current demand"
	reg: 30176, f32, W,			desc: maximumImportActivePowerDemand, W, medium, "Maximum import active power demand"
	reg: 30178, f32, W,			desc: maximumExportActivePowerDemand, W, medium, "Maximum export active power demand"
	reg: 31280, f32, kWh,		desc: totalImportActiveEnergy, kWh, medium, "Total import active energy"
	reg: 31282, f32, kWh,		desc: totalExportActiveEnergy, kWh, medium, "Total export active energy"
	reg: 31284, f32, kWh,		desc: totalActiveEnergy, kWh, medium, "Total active energy"
	reg: 31288, f32, kvarh,		desc: totalImportReactiveEnergy, kvarh, medium, "Total import reactive energy"
	reg: 31290, f32, kvarh,		desc: totalExportReactiveEnergy, kvarh, medium, "Total export reactive energy"
	reg: 31292, f32, kvarh,		desc: totalReactiveEnergy, kvarh, medium, "Total reactive energy"

	# int regs
	reg: 40000, u32, 10mV,		desc: voltage_i, V, realtime, "Voltage"
	reg: 40006, u32, mA,		desc: current_i, A, realtime, "Current"
	reg: 40012, i32, W,			desc: activePower_i, W, realtime, "Active power"
	reg: 40018, i32, var,		desc: reactivePower_i, var, realtime, "Reactive power"
	reg: 40024, u32, VA,		desc: apparentPower_i, VA, realtime, "Apparent power"
	reg: 40030, i16, 0.001,		desc: powerFactor_i, , realtime, "Power factor"
	reg: 40033, i16, 0.01deg,	desc: phase_i, deg, realtime, "Phase angle"
	reg: 40042, u16, 0.01Hz,	desc: frequency_i, Hz, realtime, "Frequency of supply voltage"
	reg: 40070, enum16,			desc: nature_i, , high, "Nature of load"
		valueid: resistive, inductive, capacitive, nonload
		valuedesc: "Resistive", "Inductive", "Capacitive", "Non Load"
	reg: 40102, i32, W,			desc: activePowerDemand_i, W, high, "Active power demand"
	reg: 40104, i32, var,		desc: reactivePowerDemand_i, var, high, "Reactive power demand"
	reg: 40106, u32, VA,		desc: apparentPowerDemand_i, VA, high, "Apparent power demand"
	reg: 40108, u32, mA,		desc: currentDemand_i, A, high, "Current demand"
	reg: 40116, u32, W,			desc: importActivePowerDemand_i, W, high, "Import active power demand"
	reg: 40118, u32, W,			desc: exportActivePowerDemand_i, W, high, "Export active power demand"
	reg: 40124, i32, W,			desc: maximumActivePowerDemand_i, W, high, "Maximum active power demand"
	reg: 40126, i32, var,		desc: maximumReactivePowerDemand_i, var, high, "Maximum reactive power demand"
	reg: 40128, u32, VA,		desc: maximumApparentPowerDemand_i, VA, high, "Maximum apparent power demand"
	reg: 40130, u32, mA,		desc: maximumCurrentDemand_i, A, high, "Maximum current demand"
	reg: 40138, u32, W,			desc: maximumImportActivePowerDemand_i, W, high, "Maximum import active power demand"
	reg: 40140, u32, W,			desc: maximumExportActivePowerDemand_i, W, high, "Maximum export active power demand"
	reg: 41024, u32, 10Wh,		desc: totalImportActive_i, kWh, high, "Total import active energy"
	reg: 41026, u32, 10Wh,		desc: totalExportActive_i, kWh, high, "Total export active energy"
	reg: 41028, u32, 10Wh,		desc: totalActiveEnergy_i, kWh, high, "Total active Energy"
	reg: 41032, u32, 10varh,	desc: totalImportReactive_i, kvarh, high, "Total import reactive energy"
	reg: 41034, u32, 10varh,	desc: totalExportReactive_i, kvarh, high, "Total export reactive energy"
	reg: 41036, u32, 10varh,	desc: totalReactiveEnergy_i, kvarh, high, "Total reactive Energy"

	# config
	reg: 60480, u16/RW,			desc: keyParameterProgrammingAuthorization, , config, "Read: to get the status of the KPPA - 0 = not authorizedï¼› 1 = authorized. Write the correct password to get KPPA, enable to program key parameters."
	reg: 60482, u16/RW, min,	desc: demandPeriod, min, config, "Write demand period: 0~60 minutes (default 60). 0 means function update every second."
	reg: 60483, u16/RW, min,	desc: slideTime, min, config, "Slide time. 1 ~ (Demand Period -1) (default 1 min)."
	reg: 60485, u16/RW,			desc: modbusAddress, , config, "Modbus address. (default 1)."
	reg: 60486, enum16/RW,		desc: networkBaudRate, , config, "Baud rate. 0 = 1200 baud; 1 = 2400 baud; 2 = 4800 baud; 3 = 9600 baud (default); 4 = 19200 baud; 5 = 38400 baud."
		valueid: _1200, _2400, _4800, _9600, _19200, _38400
		valuedesc: "1200", "2400", "4800", "9600", "19200", "38400"
	reg: 60487, enum16/RW,		desc: parityAndStopBit, , config, "Parity and stop bit. (default: one stop bit and no parity)"
		valueid: _1stopbit_noparity, _1stopbit_evenparity, _1stopbit_oddparity, _2stopbits_noparity
		valuedesc: "1 stop bit, no parity", "1 stop bit, even parity", "1 stop bit, odd parity", "2 stop bits, no parity"
	reg: 60488, u16/RW,			desc: password, , config, "Password. (default: 0000) Read: to get the password of the meter. Write: to program the new password of the meter. (KPPA is asked)"
	reg: 60489, enum16/RW,		desc: pulse1EnergyType, , config, "Pulse output 1 (default: export active energy)"
		valueid: , importActive, totalActive, , exportActive, importReactive, totalReactive, , exportReactive
		valuedesc: , "Import active", "Total active", , "Export active", "Import reactive", "Total reactive", , "Export reactive"
	reg: 60490, enum16/RW,		desc: pulse1Constant, , config, "Pulse constant index (default: 1Wh/imp)"
		valueid: _1wh, _10wh, _100wh, _1kwh, _10kwh, _100kwh, _1000kwh
		valuedesc: "1Wh/imp", "10Wh/imp", "100Wh/imp", "1kWh/imp", "10kWh/imp", "100kWh/imp", "1000kWh/imp"
	reg: 60491, u16/RW, ms,		desc: pulse1Width, ms, config, "Pulse on period in milliseconds: 60, 100 or 200 (default 100). Note: The pulse width time cannot be set to 200ms when the pulse constant is equal to 1000 imp/kWh(kvarh)."
	reg: 60504, u16/RW, s,		desc: automaticScrollDisplayTime, s, config, "Automatic scroll display time (default: 0). Note: 0 means stop automatic scroll display."
	reg: 60505, u16/RW, min,	desc: backlitTime, min, config, "Backlit time (default: 60). Range 0~120 or 255; 0 means backlit always on; 255 means backlit always off."
	reg: 60540, u32/RW, min,	desc: runningTime, min, medium, "Running time in minutes. Write 0 to reset the running time."
	reg: 60542, u32/RW, min,	desc: runningTimeWithLoad, min, medium, "Running time with load in minutes. Write 0 to reset the running time with load."
	reg: 62016, u16/W,			desc: resetHistoricalData, , config, "Reset historical data. 0 = reset max. demand. (KPPA is asked)"

	# constant data
	reg: 62017, u16/R,			desc: meterCode, , const, "The code of the meter."
	reg: 62018, u32/R,			desc: serialNumber, , const, "The serial number of the meter."
	reg: 62020, u16/R,			desc: softwareVersion, , const, "Software version number: XX.YY. First byte = XX, second byte = YY."
	reg: 62021, u16/R,			desc: hardwareVersion, , const, "Hardware version number: XX.YY. First byte = XX, second byte = YY."
	reg: 62022, u16/R,			desc: versionNumberOfDisplayed, , const, "Version number of displayed: XX.YY. First byte = XX, second byte = YY."

device-template:
	component:
		id: info
		template: DeviceInfo
		element: deviceType, "energy-meter"
		element: deviceName, "TAC Series"
		element-map: modelNumber, @meterCode
		element-map: serialNumber, @serialNumber
		element-map: hardwareVersion, @hardwareVersion
		element-map: softwareVersion, @softwareVersion
		element-map: runningTime, @runningTime
		element-map: runningTimeWithLoad, @runningTimeWithLoad
	component:
		id: realtime
		template: RealtimeEnergyMeter
		element: type, "single-phase"
		element-map: voltage, @voltage
		element-map: current, @current
		element-map: power, @activePower
		element-map: apparent, @apparentPower
		element-map: reactive, @reactivePower
		element-map: powerFactor, @powerFactor
		element-map: frequency, @frequency
		element-map: phase, @phase
		element-map: nature, @nature
	component:
		id: cumulative
		template: CumulativeEnergyMeter
		element: type, "single-phase"
		element-map: totalImportActiveEnergy, @totalImportActiveEnergy
		element-map: totalExportActiveEnergy, @totalExportActiveEnergy
		element-map: totalActiveEnergy, @totalActiveEnergy
		element-map: totalImportReactiveEnergy, @totalImportReactiveEnergy
		element-map: totalExportReactiveEnergy, @totalExportReactiveEnergy
		element-map: totalReactiveEnergy, @totalReactiveEnergy
	component:
		id: demand
		template: DemandEnergyMeter
		element-map: activePowerDemand, @activePowerDemand
		element-map: reactivePowerDemand, @reactivePowerDemand
		element-map: apparentPowerDemand, @apparentPowerDemand
		element-map: currentDemand, @currentDemand
		element-map: importActivePowerDemand, @importActivePowerDemand
		element-map: exportActivePowerDemand, @exportActivePowerDemand
		element-map: maximumActivePowerDemand, @maximumActivePowerDemand
		element-map: maximumReactivePowerDemand, @maximumReactivePowerDemand
		element-map: maximumApparentPowerDemand, @maximumApparentPowerDemand
		element-map: maximumCurrentDemand, @maximumCurrentDemand
		element-map: maximumImportActivePowerDemand, @maximumImportActivePowerDemand
		element-map: maximumExportActivePowerDemand, @maximumExportActivePowerDemand
	component:
		id: config
		template: Configuration
#		element-map: keyParameterProgrammingAuthorization, @keyParameterProgrammingAuthorization
		element-map: demandPeriod, @demandPeriod
		element-map: slideTime, @slideTime
		element-map: modbusAddress, @modbusAddress
		element-map: networkBaudRate, @networkBaudRate
		element-map: parityAndStopBit, @parityAndStopBit
		element-map: password, @password
		element-map: pulse1EnergyType, @pulse1EnergyType
		element-map: pulse1Constant, @pulse1Constant
		element-map: pulse1Width, @pulse1Width
		element-map: automaticScrollDisplayTime, @automaticScrollDisplayTime
		element-map: backlitTime, @backlitTime
		element-map: runningTime, @runningTime
		element-map: runningTimeWithLoad, @runningTimeWithLoad
		element-map: resetHistoricalData, @resetHistoricalData
